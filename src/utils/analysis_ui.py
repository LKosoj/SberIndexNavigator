"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Streamlit.
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è insights –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)


class AnalysisUIRenderer:
    """–†–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞."""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_icons = {
            "descriptive": "üìä",
            "comparative": "üèÜ", 
            "correlation": "üîó",
            "forecasting": "üîÆ",
            "error": "‚ùå"
        }
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.colors = {
            "insights": "#1f77b4",
            "recommendations": "#2ca02c", 
            "risks": "#d62728",
            "opportunities": "#ff7f0e",
            "leaders": "#2ca02c",
            "outsiders": "#d62728"
        }
    
    def render_analysis_results(self, analysis_result: Dict[str, Any]) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AnalysisAgent
        """
        try:
            if not analysis_result.get("success", False):
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return
            
            analysis_type = analysis_result.get("analysis_type", "descriptive")
            ai_insights = analysis_result.get("ai_insights", {})
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            icon = self.analysis_icons.get(analysis_type, "üìä")
            analysis_name = self._get_analysis_name(analysis_type)
            
            st.markdown(f"## {icon} {analysis_name}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI –∏–Ω—Å–∞–π—Ç–æ–≤
            if ai_insights and "error" not in ai_insights:
                self._render_ai_insights(ai_insights, analysis_type)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if "statistical_analysis" in analysis_result:
                self._render_statistical_summary(analysis_result["statistical_analysis"])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            if "data_quality" in analysis_result:
                self._render_data_quality(analysis_result["data_quality"])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if "recommendations" in analysis_result and analysis_result["recommendations"]:
                self._render_recommendations(analysis_result["recommendations"])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def _get_analysis_name(self, analysis_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        names = {
            "descriptive": "–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "comparative": "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "correlation": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "forecasting": "–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        }
        return names.get(analysis_type, "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    def _render_ai_insights(self, ai_insights: Dict[str, Any], analysis_type: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        if analysis_type == "descriptive":
            self._render_descriptive_insights(ai_insights)
        elif analysis_type == "comparative":
            self._render_comparative_insights(ai_insights)
        elif analysis_type == "correlation":
            self._render_correlation_insights(ai_insights)
        elif analysis_type == "forecasting":
            self._render_forecasting_insights(ai_insights)
    
    def _render_descriptive_insights(self, insights: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        if "key_insights" in insights and insights["key_insights"]:
            st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
            for insight in insights["key_insights"]:
                st.markdown(f"‚Ä¢ {insight}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ
        if "statistical_summary" in insights:
            st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ")
            summary = insights["statistical_summary"]
            
            col1, col2 = st.columns(2)
            with col1:
                if "mean" in summary:
                    st.info(f"**–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ**: {summary['mean']}")
                if "median" in summary:
                    st.info(f"**–ú–µ–¥–∏–∞–Ω–∞**: {summary['median']}")
            
            with col2:
                if "std" in summary:
                    st.info(f"**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ**: {summary['std']}")
                if "min_max" in summary:
                    st.info(f"**–î–∏–∞–ø–∞–∑–æ–Ω**: {summary['min_max']}")
        
        # –¢—Ä–µ–Ω–¥—ã
        if "trends" in insights and insights["trends"]:
            st.subheader("üìä –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã")
            for trend in insights["trends"]:
                st.success(f"üìà {trend}")
        
        # –ê–Ω–æ–º–∞–ª–∏–∏
        if "anomalies" in insights and insights["anomalies"]:
            st.subheader("‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏")
            for anomaly in insights["anomalies"]:
                st.warning(f"üö® {anomaly}")
        
        # –ë–∏–∑–Ω–µ—Å-–∏–º–ø–ª–∏–∫–∞—Ü–∏–∏
        if "business_implications" in insights and insights["business_implications"]:
            st.subheader("üíº –ë–∏–∑–Ω–µ—Å-–∏–º–ø–ª–∏–∫–∞—Ü–∏–∏")
            for implication in insights["business_implications"]:
                st.markdown(f"üí° {implication}")
    
    def _render_comparative_insights(self, insights: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        col1, col2 = st.columns(2)
        
        # –õ–∏–¥–µ—Ä—ã
        with col1:
            if "leaders" in insights and insights["leaders"]:
                st.subheader("üèÜ –õ–∏–¥–µ—Ä—ã")
                for leader in insights["leaders"]:
                    st.success(f"ü•á {leader}")
        
        # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã
        with col2:
            if "outsiders" in insights and insights["outsiders"]:
                st.subheader("üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã")
                for outsider in insights["outsiders"]:
                    st.error(f"üìä {outsider}")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è
        if "key_differences" in insights and insights["key_differences"]:
            st.subheader("üîç –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è")
            for diff in insights["key_differences"]:
                st.info(f"üîÑ {diff}")
        
        # –§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
        if "success_factors" in insights and insights["success_factors"]:
            st.subheader("‚≠ê –§–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞")
            for factor in insights["success_factors"]:
                st.success(f"‚úÖ {factor}")
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        if "improvement_areas" in insights and insights["improvement_areas"]:
            st.subheader("üéØ –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            for area in insights["improvement_areas"]:
                st.warning(f"üîß {area}")
    
    def _render_correlation_insights(self, insights: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        # –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if "strong_correlations" in insights and insights["strong_correlations"]:
            st.subheader("üîó –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
            
            for corr in insights["strong_correlations"]:
                variables = " ‚Üî ".join(corr.get("variables", []))
                correlation_value = corr.get("correlation", 0)
                interpretation = corr.get("interpretation", "")
                
                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                if abs(correlation_value) >= 0.8:
                    st.success(f"**{variables}** (r = {correlation_value:.3f})")
                else:
                    st.info(f"**{variables}** (r = {correlation_value:.3f})")
                
                if interpretation:
                    st.markdown(f"  üí° {interpretation}")
        
        # –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
        if "causal_relationships" in insights and insights["causal_relationships"]:
            st.subheader("üéØ –ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏")
            for relationship in insights["causal_relationships"]:
                st.info(f"üîÑ {relationship}")
        
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        if "unexpected_findings" in insights and insights["unexpected_findings"]:
            st.subheader("ü§î –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏")
            for finding in insights["unexpected_findings"]:
                st.warning(f"‚ùó {finding}")
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
        if "actionable_insights" in insights and insights["actionable_insights"]:
            st.subheader("‚ö° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã")
            for insight in insights["actionable_insights"]:
                st.success(f"üí° {insight}")
    
    def _render_forecasting_insights(self, insights: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        # –ë—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
        if "future_trends" in insights and insights["future_trends"]:
            st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ —Ç—Ä–µ–Ω–¥—ã")
            for trend in insights["future_trends"]:
                st.info(f"üìà {trend}")
        
        col1, col2 = st.columns(2)
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞
        with col1:
            if "growth_opportunities" in insights and insights["growth_opportunities"]:
                st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞")
                for opportunity in insights["growth_opportunities"]:
                    st.success(f"üíπ {opportunity}")
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
        with col2:
            if "potential_risks" in insights and insights["potential_risks"]:
                st.subheader("‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏")
                for risk in insights["potential_risks"]:
                    st.error(f"üö® {risk}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if "strategic_recommendations" in insights and insights["strategic_recommendations"]:
            st.subheader("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for recommendation in insights["strategic_recommendations"]:
                st.success(f"üíº {recommendation}")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        col1, col2 = st.columns(2)
        with col1:
            if "timeline" in insights:
                st.metric("üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏", insights["timeline"])
        
        with col2:
            if "confidence_level" in insights:
                st.metric("üéØ –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", insights["confidence_level"])
    
    def _render_statistical_summary(self, stats: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—é–º–µ."""
        with st.expander("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=False):
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if "basic_stats" in stats and stats["basic_stats"]:
                st.subheader("üìà –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                basic_stats_df = pd.DataFrame(stats["basic_stats"])
                st.dataframe(basic_stats_df.round(3), use_container_width=True)
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
            if "correlation_matrix" in stats and stats["correlation_matrix"]:
                st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
                corr_df = pd.DataFrame(stats["correlation_matrix"])
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                fig = px.imshow(
                    corr_df,
                    title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞",
                    color_continuous_scale="RdBu",
                    aspect="auto",
                    height=400
                )
                fig.update_traces(
                    text=corr_df.round(2).values,
                    texttemplate="%{text}",
                    textfont={"size": 10}
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # –í—ã–±—Ä–æ—Å—ã
            if "outliers" in stats and stats["outliers"]:
                st.subheader("üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã")
                for column, outlier_values in stats["outliers"].items():
                    st.warning(f"**{column}**: {len(outlier_values)} –≤—ã–±—Ä–æ—Å–æ–≤")
                    if len(outlier_values) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
                        st.text(f"–ó–Ω–∞—á–µ–Ω–∏—è: {', '.join(map(str, outlier_values))}")
            
            # –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if "clustering" in stats and stats["clustering"]:
                self._render_clustering_results(stats["clustering"])
    
    def _render_clustering_results(self, clustering: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        st.subheader("üéØ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        n_clusters = clustering.get("n_clusters", 0)
        st.info(f"–í—ã—è–≤–ª–µ–Ω–æ **{n_clusters}** –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
        
        if "cluster_analysis" in clustering:
            for cluster_name, cluster_info in clustering["cluster_analysis"].items():
                cluster_num = cluster_name.split("_")[1]
                size = cluster_info.get("size", 0)
                characteristics = cluster_info.get("characteristics", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                
                with st.expander(f"–ö–ª–∞—Å—Ç–µ—Ä {cluster_num} ({size} –æ–±—ä–µ–∫—Ç–æ–≤)"):
                    st.markdown(f"**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**: {characteristics}")
                    
                    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
                    if "mean_values" in cluster_info:
                        mean_values = cluster_info["mean_values"]
                        if mean_values:
                            st.markdown("**–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:**")
                            for metric, value in mean_values.items():
                                if isinstance(value, (int, float)):
                                    st.metric(metric, f"{value:.2f}")
    
    def _render_data_quality(self, quality: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
        with st.expander("üîç –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                score = quality.get("quality_score", 0)
                st.metric("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{score}%")
            
            with col2:
                level = quality.get("quality_level", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                st.metric("üèÜ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞", level)
            
            with col3:
                missing = quality.get("missing_percentage", 0)
                st.metric("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", f"{missing}%")
            
            # –ü—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö
            if "issues" in quality and quality["issues"]:
                st.subheader("‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
                for issue in quality["issues"]:
                    st.warning(f"üîß {issue}")
    
    def _render_recommendations(self, recommendations: List[str]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        st.subheader("üí° –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        for i, recommendation in enumerate(recommendations, 1):
            st.success(f"**{i}.** {recommendation}")
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
            recommendations_text = "\n".join([f"{i}. {rec}" for i, rec in enumerate(recommendations, 1)])
            st.code(recommendations_text, language=None)
            st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")


# Singleton instance
analysis_ui_renderer: AnalysisUIRenderer = None


def get_analysis_ui_renderer() -> AnalysisUIRenderer:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AnalysisUIRenderer.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä AnalysisUIRenderer
    """
    global analysis_ui_renderer
    if analysis_ui_renderer is None:
        analysis_ui_renderer = AnalysisUIRenderer()
    return analysis_ui_renderer


def render_analysis_quick_summary(insights: Dict[str, Any]) -> None:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        insights: AI –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if "key_insights" in insights and insights["key_insights"]:
        with st.container():
            st.markdown("### üîç –ì–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã")
            for insight in insights["key_insights"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                st.info(f"üí° {insight}")
    
    if "recommendations" in insights and insights["recommendations"]:
        with st.container():
            st.markdown("### üí° –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in insights["recommendations"][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                st.success(f"‚úÖ {rec}") 