"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SberIndexNavigator.
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –°–±–µ—Ä–±–∞–Ω–∫–∞.
"""

import streamlit as st
import pandas as pd
import logging
from typing import Dict, Any, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from src.config.settings import (
    APP_TITLE, 
    APP_SUBTITLE, 
    DEMO_QUESTIONS,
    OPENAI_API_KEY
)
from src.data.database import initialize_database, get_database_manager
from src.agents.sql_agent import get_sql_agent
from src.agents.visualize_tool import get_visualization_analyzer
from src.visualization.charts import get_chart_creator
from src.visualization.maps import get_map_creator

logger = logging.getLogger(__name__)


def setup_page_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit."""
    st.set_page_config(
        page_title="SberIndexNavigator",
        page_icon="üß≠",
        layout="wide",
        initial_sidebar_state="expanded"
    )


def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "database_initialized" not in st.session_state:
        st.session_state.database_initialized = False
    
    if "agents_initialized" not in st.session_state:
        st.session_state.agents_initialized = False


@st.cache_resource
def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        initialize_database()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not OPENAI_API_KEY or OPENAI_API_KEY == "your_openai_api_key_here":
            return False, "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ."
        
        return True, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"


def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    with st.sidebar:
        st.header("üéØ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        st.markdown("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ:")
        
        for i, question in enumerate(DEMO_QUESTIONS):
            if st.button(question, key=f"demo_q_{i}", use_container_width=True):
                st.session_state.demo_question = question
        
        st.markdown("---")
        
        st.header("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.markdown("""
        **–¢–∞–±–ª–∏—Ü—ã:**
        - `region_spending` - —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        - `demographics` - –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ  
        - `transport_data` - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        
        **–†–µ–≥–∏–æ–Ω—ã:**
        - –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å
        - –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ –∏ –¥—Ä.
        """)
        
        st.markdown("---")
        
        st.header("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        if st.session_state.database_initialized:
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        if st.session_state.agents_initialized:
            st.success("‚úÖ AI –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        else:
            st.warning("‚ö†Ô∏è AI –∞–≥–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


def render_chat_interface():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    st.header("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if "data" in message and not message["data"].empty:
                st.subheader("üìä –î–∞–Ω–Ω—ã–µ")
                st.dataframe(message["data"], use_container_width=True)
            
            if "visualization" in message:
                st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                render_visualization(message["visualization"])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å–∞ –∏–∑ sidebar
    if "demo_question" in st.session_state:
        process_user_input(st.session_state.demo_question)
        del st.session_state.demo_question
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤..."):
        process_user_input(prompt)


def process_user_input(user_input: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    
    Args:
        user_input: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({
        "role": "user", 
        "content": user_input
    })
    
    with st.chat_message("user"):
        st.markdown(user_input)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    with st.chat_message("assistant"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
            try:
                # –ü–æ–ª—É—á–∞–µ–º SQL-–∞–≥–µ–Ω—Ç
                sql_agent = get_sql_agent()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
                result = sql_agent.analyze_question(user_input)
                
                if result["success"]:
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.markdown(f"**–ê–Ω–∞–ª–∏–∑:** {user_input}")
                    
                    if not result["data"].empty:
                        st.subheader("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        st.dataframe(result["data"], use_container_width=True)
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                        visualization_config = create_visualization(result["data"], user_input)
                        
                        if visualization_config:
                            st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                            render_visualization(visualization_config)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        assistant_message = {
                            "role": "assistant",
                            "content": f"**–ê–Ω–∞–ª–∏–∑:** {user_input}",
                            "data": result["data"],
                            "sql_query": result["sql_query"]
                        }
                        
                        if visualization_config:
                            assistant_message["visualization"] = visualization_config
                        
                        st.session_state.messages.append(assistant_message)
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                        })
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}"
                    })
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                })


def create_visualization(data: pd.DataFrame, question: str) -> Optional[Dict[str, Any]]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_analyzer = get_visualization_analyzer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        chart_type = viz_analyzer.determine_chart_type(data, question)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = viz_analyzer.get_visualization_config(chart_type, data)
        config["title"] = f"–ê–Ω–∞–ª–∏–∑: {question}"
        
        return config
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None


def render_visualization(config: Dict[str, Any]):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    try:
        chart_type = config.get("type", "table")
        
        if chart_type == "map":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—ã
            map_creator = get_map_creator()
            map_creator.display_map("scatter", config)
        elif chart_type == "table":
            # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.dataframe(config["data"], use_container_width=True)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            chart_creator = get_chart_creator()
            chart_creator.display_chart(chart_type, config)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


def render_header():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.title(APP_TITLE)
    st.markdown(f"*{APP_SUBTITLE}*")
    st.markdown("---")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    setup_page_config()
    initialize_session_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    success, message = initialize_app()
    
    if not success:
        st.error(f"‚ùå {message}")
        st.stop()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    st.session_state.database_initialized = True
    st.session_state.agents_initialized = success
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    render_header()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2 = st.columns([3, 1])
    
    with col1:
        render_chat_interface()
    
    with col2:
        render_sidebar()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        "üèÜ **SberIndexNavigator** - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
        "–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ '–í–æ–ø—Ä–æ—Å ‚Üí –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç ‚Üí –ê–≤—Ç–æ–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è'"
    )


if __name__ == "__main__":
    main() 