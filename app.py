"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SberIndexNavigator.
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –°–±–µ—Ä–±–∞–Ω–∫–∞.
"""

import streamlit as st
import pandas as pd
import logging
from typing import Dict, Any, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from src.config.settings import (
    APP_TITLE, 
    APP_SUBTITLE, 
    DEMO_QUESTIONS,
    OPENAI_API_KEY
)
from src.data.database import initialize_database, get_database_manager
from src.agents.sql_agent import get_sql_agent
from src.agents.analysis_agent import get_analysis_agent
from src.agents.visualize_tool import get_visualization_analyzer
from src.visualization.charts import get_chart_creator
from src.visualization.maps import get_map_creator
from src.utils.pdf_export import generate_qa_pdf, generate_full_history_pdf
from src.utils.analysis_ui import get_analysis_ui_renderer, render_analysis_quick_summary

logger = logging.getLogger(__name__)


def setup_page_config():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit."""
    st.set_page_config(
        page_title="SberIndexNavigator",
        page_icon="üß≠",
        layout="wide",
        initial_sidebar_state="expanded"
    )


def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "database_initialized" not in st.session_state:
        st.session_state.database_initialized = False
    
    if "agents_initialized" not in st.session_state:
        st.session_state.agents_initialized = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if "processing_request" not in st.session_state:
        st.session_state.processing_request = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    if "enable_analysis" not in st.session_state:
        st.session_state.enable_analysis = True
    
    if "analysis_mode" not in st.session_state:
        st.session_state.analysis_mode = "auto"  # auto, basic, advanced


@st.cache_resource
def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        initialize_database()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        if not OPENAI_API_KEY or OPENAI_API_KEY == "your_openai_api_key_here":
            return False, "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ."
        
        return True, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"


def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    with st.sidebar:
        st.header("üéØ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        st.markdown("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ:")
        
        for i, question in enumerate(DEMO_QUESTIONS):
            if st.button(question, key=f"demo_q_{i}", use_container_width=True):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                st.session_state.demo_question = question
        
        st.markdown("---")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        st.header("üî¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        st.session_state.enable_analysis = st.checkbox(
            "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            value=st.session_state.enable_analysis,
            help="–í–∫–ª—é—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        )
        
        if st.session_state.enable_analysis:
            # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞
            st.session_state.analysis_mode = st.selectbox(
                "üìä –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:",
                options=["auto", "basic", "advanced"],
                format_func=lambda x: {
                    "auto": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    "basic": "üìà –ë–∞–∑–æ–≤—ã–π", 
                    "advanced": "üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"
                }[x],
                index=["auto", "basic", "advanced"].index(st.session_state.analysis_mode),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª—É–±–∏–Ω—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            )
        
        st.markdown("---")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ PDF
        st.header("üìÑ –≠–∫—Å–ø–æ—Ä—Ç")
        if len(st.session_state.messages) > 0:
            if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ PDF", use_container_width=True):
                export_full_history_to_pdf()
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        
        st.markdown("---")
        
        st.header("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.markdown("""
        **–¢–∞–±–ª–∏—Ü—ã:**
        - `region_spending` - —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        - `demographics` - –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ  
        - `transport_data` - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        
        **–†–µ–≥–∏–æ–Ω—ã:**
        - –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å
        - –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ –∏ –¥—Ä.
        """)
        
        st.markdown("---")
        
        st.header("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        if st.session_state.database_initialized:
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        if st.session_state.agents_initialized:
            st.success("‚úÖ AI –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        else:
            st.warning("‚ö†Ô∏è AI –∞–≥–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        if st.session_state.enable_analysis:
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω")
        else:
            st.info("‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω")


def render_chat_interface():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    st.header("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for i, message in enumerate(st.session_state.messages):
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if "data" in message and not message["data"].empty:
                st.subheader("üìä –î–∞–Ω–Ω—ã–µ")
                st.dataframe(message["data"], use_container_width=True)
            
            if "visualization" in message:
                st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                render_visualization(message["visualization"])
            
            # === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê ===
            if "analysis" in message and message["analysis"]:
                analysis_result = message["analysis"]
                if analysis_result.get("success", False):
                    st.markdown("---")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∞–Ω–∞–ª–∏–∑–∞
                    analysis_ui = get_analysis_ui_renderer()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    display_mode = st.session_state.get("analysis_mode", "basic")
                    
                    if display_mode == "advanced":
                        # –ü–æ–ª–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
                        with st.expander("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                            analysis_ui.render_analysis_results(analysis_result)
                    else:
                        # –ö—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        ai_insights = analysis_result.get("ai_insights", {})
                        if ai_insights and "error" not in ai_insights:
                            with st.expander("üß† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", expanded=False):
                                render_analysis_quick_summary(ai_insights)
                        
                        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        recommendations = analysis_result.get("recommendations", [])
                        if recommendations:
                            with st.expander("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=True):
                                for idx, rec in enumerate(recommendations, 1):
                                    st.success(f"**{idx}.** {rec}")
            
            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            has_data = "data" in message and message["data"] is not None and not message["data"].empty
            has_viz = "visualization" in message and message["visualization"] is not None
            is_assistant = message["role"] == "assistant"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            if is_assistant and st.session_state.get("debug_mode", False):
                st.caption(f"Debug: has_data={has_data}, has_viz={has_viz}, keys={list(message.keys())}")
            
            if is_assistant and (has_data or has_viz):
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_question = ""
                if i > 0 and st.session_state.messages[i-1]["role"] == "user":
                    user_question = st.session_state.messages[i-1]["content"]
                
                col1, col2, col3 = st.columns([1, 1, 4])
                with col1:
                    if st.button(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç PDF", key=f"export_pdf_{i}"):
                        export_to_pdf(
                            question=user_question,
                            answer=message["content"],
                            data=message.get("data"),
                            sql_query=message.get("sql_query"),
                            visualization_config=message.get("visualization"),
                            analysis_result=message.get("analysis"),
                            message_index=i
                        )
                
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                with col2:
                    if (has_data and st.session_state.enable_analysis):
                        if st.button(f"üîÑ –ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑", key=f"reanalyze_{i}"):
                            with st.spinner("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                                try:
                                    analysis_agent = get_analysis_agent()
                                    new_analysis = analysis_agent.analyze_data(
                                        message["data"], 
                                        user_question
                                    )
                                    
                                    if new_analysis and new_analysis.get("success", False):
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        st.session_state.messages[i]["analysis"] = new_analysis
                                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                                        
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤..."):
        process_user_input(prompt)


def export_full_history_to_pdf():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ PDF —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Q&A."""
    try:
        if not st.session_state.messages:
            st.warning("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
            return
        
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞..."):
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Q&A –ø–∞—Ä—ã
            qa_pairs = []
            current_question = ""
            
            for message in st.session_state.messages:
                if message["role"] == "user":
                    current_question = message["content"]
                elif message["role"] == "assistant" and current_question:
                    qa_pairs.append({
                        "question": current_question,
                        "answer": message["content"],
                        "data": message.get("data"),
                        "sql_query": message.get("sql_query"),
                        "visualization": message.get("visualization"),
                        "analysis": message.get("analysis")
                    })
                    current_question = ""
            
            if not qa_pairs:
                st.warning("–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
                return
            
            # –°–æ–∑–¥–∞–µ–º PDF —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ Q&A —Å–µ–∫—Ü–∏—è–º–∏
            # –ú—ã –±—É–¥–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π PDF —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Q&A
            pdf_bytes = generate_full_history_pdf(qa_pairs)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sber_index_full_history_{timestamp}.pdf"
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π PDF –æ—Ç—á–µ—Ç",
                data=pdf_bytes,
                file_name=filename,
                mime="application/pdf",
                key=f"download_full_pdf_{timestamp}"
            )
            
            st.success(f"‚úÖ –ü–æ–ª–Ω—ã–π PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –í–∫–ª—é—á–∞–µ—Ç {len(qa_pairs)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ PDF: {e}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞: {e}")


def export_to_pdf(
    question: str,
    answer: str,
    data: Optional[pd.DataFrame] = None,
    sql_query: Optional[str] = None,
    visualization_config: Optional[Dict[str, Any]] = None,
    analysis_result: Optional[Dict[str, Any]] = None,
    message_index: int = 0
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –≤ PDF.
    
    Args:
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer: –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
        data: –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        sql_query: SQL –∑–∞–ø—Ä–æ—Å
        visualization_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        message_index: –ò–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞..."):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            pdf_bytes = generate_qa_pdf(
                question=question,
                answer=answer,
                data=data,
                sql_query=sql_query,
                visualization_config=visualization_config,
                analysis_result=analysis_result
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"sber_index_report_{timestamp}.pdf"
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                data=pdf_bytes,
                file_name=filename,
                mime="application/pdf",
                key=f"download_pdf_{message_index}_{timestamp}"
            )
            
            st.success("‚úÖ PDF –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {e}")
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–∞: {e}")


def process_user_input(user_input: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    
    Args:
        user_input: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.session_state.processing_request:
        return
        
    st.session_state.processing_request = True
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({
            "role": "user", 
            "content": user_input
        })
        
        with st.chat_message("user"):
            st.markdown(user_input)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        with st.chat_message("assistant"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º SQL-–∞–≥–µ–Ω—Ç
                    sql_agent = get_sql_agent()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
                    result = sql_agent.analyze_question(user_input)
                    
                    if result["success"]:
                        if not result["data"].empty:
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            st.markdown(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:** {user_input}")
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            st.subheader("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                            st.dataframe(result["data"], use_container_width=True)
                            
                            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                            visualization_config = create_visualization(result["data"], user_input)
                            
                            if visualization_config:
                                st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                                render_visualization(visualization_config)
                            
                            # === –ë–õ–û–ö –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–• ===
                            analysis_result = None
                            
                            if st.session_state.enable_analysis:
                                with st.spinner("–ü—Ä–æ–≤–æ–∂—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                                    try:
                                        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞
                                        analysis_agent = get_analysis_agent()
                                        
                                        # –û–°–ù–û–í–ù–û–ô –í–´–ó–û–í –ê–ù–ê–õ–ò–ó–ê
                                        analysis_result = analysis_agent.analyze_data(result["data"], user_input)
                                        
                                        if analysis_result and analysis_result.get("success", False):
                                            st.markdown("---")
                                            st.success("üß† –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                                            
                                            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                                            recommendations = analysis_result.get("recommendations", [])
                                            if recommendations:
                                                st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                                                for i, rec in enumerate(recommendations[:3], 1):
                                                    st.success(f"**{i}.** {rec}")
                                            
                                            # AI –∏–Ω—Å–∞–π—Ç—ã
                                            ai_insights = analysis_result.get("ai_insights", {})
                                            if ai_insights and "error" not in ai_insights:
                                                st.subheader("üß† AI –ê–Ω–∞–ª–∏–∑")
                                                render_analysis_quick_summary(ai_insights)
                                        else:
                                            st.error("‚ùå –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è")
                                    
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                            assistant_message = {
                                "role": "assistant",
                                "content": f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:** {user_input}",
                                "data": result["data"],
                                "sql_query": result["sql_query"]
                            }
                            
                            if visualization_config:
                                assistant_message["visualization"] = visualization_config
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if analysis_result and analysis_result.get("success", False):
                                assistant_message["analysis"] = analysis_result
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
                                ai_insights = analysis_result.get("ai_insights", {})
                                if "key_insights" in ai_insights and ai_insights["key_insights"]:
                                    insights_text = "\n\n**–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:**\n"
                                    for insight in ai_insights["key_insights"][:2]:
                                        insights_text += f"‚Ä¢ {insight}\n"
                                    assistant_message["content"] += insights_text
                                
                                recommendations = analysis_result.get("recommendations", [])
                                if recommendations:
                                    rec_text = "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                                    for i, rec in enumerate(recommendations[:2], 1):
                                        rec_text += f"{i}. {rec}\n"
                                    assistant_message["content"] += rec_text
                            
                            st.session_state.messages.append(assistant_message)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            st.markdown("---")
                            col1, col2, col3 = st.columns([1, 1, 4])
                            with col1:
                                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç PDF", key=f"export_current_result"):
                                    export_to_pdf(
                                        question=user_input,
                                        answer=assistant_message["content"],
                                        data=assistant_message.get("data"),
                                        sql_query=assistant_message.get("sql_query"),
                                        visualization_config=assistant_message.get("visualization"),
                                        analysis_result=assistant_message.get("analysis"),
                                        message_index=len(st.session_state.messages)-1
                                    )
                        
                        else:
                            st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                            st.session_state.messages.append({
                                "role": "assistant",
                                "content": "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                            })
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}"
                        })
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                    })
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.session_state.processing_request = False


def create_visualization(data: pd.DataFrame, question: str) -> Optional[Dict[str, Any]]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_analyzer = get_visualization_analyzer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        chart_type = viz_analyzer.determine_chart_type(data, question)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = viz_analyzer.get_visualization_config(chart_type, data)
        config["title"] = f"–ê–Ω–∞–ª–∏–∑: {question}"
        
        return config
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None


def render_visualization(config: Dict[str, Any]):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    try:
        chart_type = config.get("type", "table")
        
        if chart_type == "map":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—ã
            map_creator = get_map_creator()
            map_creator.display_map("scatter", config)
        elif chart_type == "table":
            # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.dataframe(config["data"], use_container_width=True)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            chart_creator = get_chart_creator()
            chart_creator.display_chart(chart_type, config)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


def render_header():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.title(APP_TITLE)
    st.markdown(f"*{APP_SUBTITLE}*")
    st.markdown("---")


def check_and_process_demo_question():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    if "demo_question" in st.session_state:
        demo_question = st.session_state.demo_question
        del st.session_state.demo_question
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∂–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
        process_user_input(demo_question)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    setup_page_config()
    initialize_session_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    success, message = initialize_app()
    
    if not success:
        st.error(f"‚ùå {message}")
        st.stop()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    st.session_state.database_initialized = True
    st.session_state.agents_initialized = success
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    render_header()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        render_chat_interface()
    
    with col2:
        # –°–∞–π–¥–±–∞—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        render_sidebar()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        "üèÜ **SberIndexNavigator** - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π "
        "–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ '–í–æ–ø—Ä–æ—Å ‚Üí –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç ‚Üí –ê–≤—Ç–æ–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è'"
    )
    
    # –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã
    check_and_process_demo_question()


if __name__ == "__main__":
    main() 